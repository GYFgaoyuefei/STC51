C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\KEIL\KEIL-CODE\C51\BIN\C51.EXE main.c OPTIMIZE(9,SIZE) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\main.lst) TABS(3) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC89C5XRC.H>
   2          //#include <STC12C5A60S2.H>
   3          
   4          #include <intrins.h>
   5          #include <math.h>
   6          //#include "MenYuhan_Drivers_STC89.h"
   7          
   8          typedef unsigned int uint;
   9          typedef unsigned char uchar;
  10          
  11          #define BIT0 1<<0
  12          #define BIT1 1<<1
  13          #define BIT2 1<<2
  14          #define BIT3 1<<3
  15          
  16          #define BIT4 1<<4
  17          #define BIT5 1<<5
  18          #define BIT6 1<<6
  19          #define BIT7 1<<7
  20          
  21          #define BIT8_ALL 0xff
  22          
  23          /*************************************注意******************************************/
  24          //data是C51关键字
  25          /***********************************预装数据****************************************/
  26          
  27          /***********************************预设变量****************************************/
  28          uchar hour_shi = 0;
  29          uchar hour_ge = 0;
  30          uchar min_shi = 0;
  31          uchar min_ge = 0;
  32          uchar sec_shi = 0;
  33          uchar sec_ge = 0;
  34          
  35          //f=11.0592MHz
  36          /******************************************粗略延时***********************************/
  37          void Delay_ms(uint time_ms)
  38          {
  39   1         uint i, j;
  40   1         for (i = 0; i < time_ms; i++)
  41   1            for (j = 0; j < 113; j++);
  42   1      }
  43          /******************************************较为精准延时********************************/
  44          /***********************************************ms*****************/
  45          void Delay_ms_1()
  46          {
  47   1         unsigned char i, j;
  48   1         _nop_();
  49   1         i = 2;
  50   1         j = 199;
  51   1         do
  52   1         {
  53   2            while (--j);
  54   2         } while (--i);
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 2   

  55   1      }
  56          
  57          void Delay_ms_2()
  58          {
  59   1         unsigned char i, j;
  60   1         _nop_();
  61   1         i = 4;
  62   1         j = 146;
  63   1         do
  64   1         {
  65   2            while (--j);
  66   2         } while (--i);
  67   1      }
  68          
  69          void Delay_ms_5()
  70          {
  71   1         unsigned char i, j;
  72   1         i = 9;
  73   1         j = 244;
  74   1         do
  75   1         {
  76   2            while (--j);
  77   2         } while (--i);
  78   1      }
  79          /***********************************************s******************/
  80          void Delay_s_0_5()
  81          {
  82   1         unsigned char i, j, k;
  83   1      
  84   1         _nop_();
  85   1         i = 4;
  86   1         j = 129;
  87   1         k = 119;
  88   1         do
  89   1         {
  90   2            do
  91   2            {
  92   3               while (--k);
  93   3            } while (--j);
  94   2         } while (--i);
  95   1      }
  96          
  97          void Delay_s_1()
  98          {
  99   1         unsigned char i, j, k;
 100   1      
 101   1         _nop_();
 102   1         i = 8;
 103   1         j = 1;
 104   1         k = 243;
 105   1         do
 106   1         {
 107   2            do
 108   2            {
 109   3               while (--k);
 110   3            } while (--j);
 111   2         } while (--i);
 112   1      }
 113          
 114          /***************************************预定义*****************************************/
 115          /***************************************LED**********************/
 116          /**************************************IO预定义*/
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 3   

 117          sbit LED0 = P1 ^ 0;
 118          sbit LED1 = P1 ^ 1;
 119          sbit LED2 = P1 ^ 2;
 120          sbit LED3 = P1 ^ 3;
 121          sbit LED4 = P1 ^ 4;
 122          sbit LED5 = P1 ^ 5;
 123          sbit LED6 = P1 ^ 6;
 124          sbit LED7 = P1 ^ 7;
 125          /**************************************操作预定义*/
 126          /*开灯*/
 127          #define LED0_On LED0=0
 128          #define LED1_On LED1=0
 129          #define LED2_On LED2=0
 130          #define LED3_On LED3=0
 131          #define LED4_On LED4=0
 132          #define LED5_On LED5=0
 133          #define LED6_On LED6=0
 134          #define LED7_On LED7=0
 135          #define LED_ALL_On P1=0x00
 136          /*关灯*/
 137          #define LED0_Off LED0=1
 138          #define LED1_Off LED1=1
 139          #define LED2_Off LED2=1
 140          #define LED3_Off LED3=1
 141          #define LED4_Off LED4=1
 142          #define LED5_Off LED5=1
 143          #define LED6_Off LED6=1
 144          #define LED7_Off LED7=1
 145          #define LED_ALL_Off P1=0xff
 146          /*反转*/
 147          #define LED0_Toggle P1^=BIT0
 148          #define LED1_Toggle P1^=BIT1
 149          #define LED2_Toggle P1^=BIT2
 150          #define LED3_Toggle P1^=BIT3
 151          #define LED4_Toggle P1^=BIT4
 152          #define LED5_Toggle P1^=BIT5
 153          #define LED6_Toggle P1^=BIT6
 154          #define LED7_Toggle P1^=BIT7
 155          #define LED_ALL_Toggle P1^=BIT8_ALL
 156          
 157          /***************************************Beep*****************/
 158          /**************************************IO预定义*/
 159          sbit Beep = P2 ^ 3;
 160          /**************************************操作预定义*/
 161          #define Beep_On Beep=0
 162          #define Beep_Off Beep=1
 163          #define Beep_Toggle P2^=BIT3
 164          /***************************************数码管*****************/
 165          sbit wx = P2 ^ 7;
 166          sbit dx = P2 ^ 6;
 167          /***************************************独立按键****************/
 168          sbit Key_i0 = P3 ^ 4;
 169          sbit Key_i1 = P3 ^ 5;
 170          sbit Key_i2 = P3 ^ 6;
 171          sbit Key_i3 = P3 ^ 7;
 172          /***************************************操作****************************************/
 173          void STC89_TX_1C_Board_IO_Base_Init()
 174          {
 175   1         dx = 0;  //dx
 176   1         wx = 0;  //wx
 177   1      
 178   1         EA = 1;
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 4   

 179   1      }
 180          
 181          /********************************************常量定义*********************************************/
 182          /********************************************段选************************/
 183          uchar code duanxuan[] =
 184          {
 185             0x3f,    //0
 186             0x06,    //1
 187             0x5b,    //2
 188             0x4f,    //3
 189             0x66,    //4
 190             0x6d,    //5
 191             0x7d,    //6
 192             0x07,    //7
 193             0x7f,    //8
 194             0x6f,    //9
 195          
 196             0x77,    //A--10
 197             0x7c,    //b--11
 198             0x39,    //C--12
 199             0x5e,    //d--13
 200             0x79,    //E--14
 201             0x71,    //F--15
 202             0x3d,    //G--16
 203             0x76,    //H--17
 204             0x11,    //i--18
 205             0x0e,    //J--19
 206             0x7a,    //k--20
 207             0x38,    //L--21
 208             0x55,    //M--22
 209             0x54,    //n--23
 210             0X3f,    //O--24
 211             0x73,    //P--25
 212             0x67,    //q--26
 213             0x50,    //r--27
 214             0x6d,    //S--28
 215             0x78,    //t--29
 216             0x3e,    //U--30
 217             0x3e,    //V--31
 218             0x6a,    //W--32
 219             0x76,    //X--33
 220             0x6e,    //y--34
 221             0x5b,    //Z--35
 222          
 223             0x7b,    //e--36
 224             0x74,    //h--37
 225             0x5c,    //o--38
 226             0x1c,    //u--39
 227             0x62,    //v--40
 228          
 229             0x00     //0x00为全不亮--41
 230          };
 231          /********************************************位选************************/
 232          uchar code weixuan[] =        //左边第一位为bit0
 233          {
 234             0xfe,    //0
 235             0xfd,    //1
 236             0xfb,    //2
 237             0xf7,    //3
 238             0xef,    //4
 239             0xdf,    //5
 240             0xc0     //ALL--6
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 5   

 241          };
 242          /*******************************************预装数据**********************************************/
 243          uchar code HELLO[] = { 17,14,21,21,24,41 };
 244          /********************************************IO定义**********************************************/
 245          //sbit wx = P2 ^ 7;
 246          //sbit dx = P2 ^ 6;
 247          /***********************************************操作**********************************************/
 248          /*******************************************数码管显示1bit******************/
 249          void DigitalTube_Display_1bit(uchar wei, uchar duan)     //位数据，段数据
 250          {
 251   1         dx = 1;
 252   1         P0 = duanxuan[duan];   //送段数据
 253   1         dx = 0;
 254   1         P0 = 0xff;     //送位数据前关闭所有显示，防止打开位选锁存后段选数据通过位选锁存器
 255   1         wx = 1;
 256   1         P0 = weixuan[wei];
 257   1         wx = 0;
 258   1         Delay_ms_1();
 259   1      }
 260          /*******************************************数码管显示3bit数字******************/
 261          void DigitalTube_Display_num_3bit(uchar shu)
 262          {
 263   1         uchar bai, shi, ge;
 264   1         bai = shu / 100;
 265   1         shi = shu / 10 % 10;
 266   1         ge = shu % 10;
 267   1      
 268   1         DigitalTube_Display_1bit(0, bai);
 269   1         DigitalTube_Display_1bit(1, shi);
 270   1         DigitalTube_Display_1bit(2, ge);
 271   1      }
 272          /*******************************************数码管显示6bit******************/
 273          void DigitalTube_Display_6bit(uchar zero, uchar one, uchar two, uchar three, uchar four, uchar five)
 274          {
 275   1         DigitalTube_Display_1bit(0, zero);
 276   1         DigitalTube_Display_1bit(1, one);
 277   1         DigitalTube_Display_1bit(2, two);
 278   1         DigitalTube_Display_1bit(3, three);
 279   1         DigitalTube_Display_1bit(4, four);
 280   1         DigitalTube_Display_1bit(5, five);
 281   1      }
 282          /*******************************************数码管显示HELLO******************/
 283          void DigitalTube_Display_Str_HELLO()
 284          {
 285   1         DigitalTube_Display_6bit(HELLO[0], HELLO[1], HELLO[2], HELLO[3], HELLO[4], HELLO[5]);
 286   1      }
 287          
 288          /************************************注意*****************************************/
 289          //data为C51关键字
 290          /***********************************预设量****************************************/
 291          uchar TimeBuff[7] = { 20,10,24,7,12,12,00 };   //时间数组，2020年10月24日，星期六，12:12:00
 292          // TimeBuff[0] 代表年份，范围00-99
 293          // TimeBuff[1] 代表月份，范围1-12
 294          // TimeBuff[2] 代表日期，范围1-31
 295          // TimeBuff[3] 代表星期，范围1-7，1是星期天，2是星期一
 296          // TimeBuff[4] 代表小时，范围00-23
 297          // TimeBuff[5] 代表分钟，范围00-59
 298          // TimeBuff[6] 代表秒钟，范围00-59
 299          
 300          /**********************************IO定义*****************************************/
 301          sbit DS1302_CLK = P2 ^ 1;
 302          sbit DS1302_IO = P2 ^ 0;
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 6   

 303          sbit DS1302_RST = P2 ^ 4;
 304          /***********************************操作******************************************/
 305          /***********************************通信********************/
 306          /*********************************读1字节*/
 307          uchar DS1302_R_Byte(uchar addr)
 308          {
 309   1         uchar i;
 310   1         uchar temp;
 311   1      
 312   1         DS1302_RST = 1;
 313   1         for (i = 0; i < 8; i++)       //写入目标地址：addr
 314   1         {
 315   2            if (addr & 0x01)
 316   2               DS1302_IO = 1;
 317   2            else
 318   2               DS1302_IO = 0;
 319   2      
 320   2            DS1302_CLK = 1;
 321   2            _nop_();
 322   2            DS1302_CLK = 0;
 323   2            _nop_();
 324   2      
 325   2            addr = addr >> 1;
 326   2         }
 327   1      
 328   1         for (i = 0; i < 8; i++)       //读出该地址的数据
 329   1         {
 330   2            temp = temp >> 1;
 331   2      
 332   2            if (DS1302_IO)
 333   2               temp |= 0x80;
 334   2            else
 335   2               temp &= 0x7F;
 336   2      
 337   2            DS1302_CLK = 1;
 338   2            _nop_();
 339   2            DS1302_CLK = 0;
 340   2            _nop_();
 341   2         }
 342   1         DS1302_RST = 0;
 343   1         return temp;
 344   1      }
 345          
 346          /*********************************写1字节*/
 347          void DS1302_W_Byte(uchar addr, uchar dat)
 348          {
 349   1         uchar i;
 350   1      
 351   1         DS1302_RST = 1;
 352   1         for (i = 0; i < 8; i++)       //写入目标地址：addr
 353   1         {
 354   2            if (addr & 0x01)
 355   2               DS1302_IO = 1;
 356   2            else
 357   2               DS1302_IO = 0;
 358   2      
 359   2            DS1302_CLK = 1;
 360   2            _nop_();
 361   2            DS1302_CLK = 0;
 362   2            _nop_();
 363   2      
 364   2            addr = addr >> 1;
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 7   

 365   2         }
 366   1      
 367   1         for (i = 0; i < 8; i++)       //写入数据：dat
 368   1         {
 369   2            if (dat & 0x01)
 370   2               DS1302_IO = 1;
 371   2            else
 372   2               DS1302_IO = 0;
 373   2      
 374   2            DS1302_CLK = 1;
 375   2            _nop_();
 376   2            DS1302_CLK = 0;
 377   2            _nop_();
 378   2      
 379   2            dat = dat >> 1;
 380   2         }
 381   1         DS1302_RST = 0;
 382   1      }
 383          
 384          /***********************************行动********************/
 385          /*******************************写入时间数据*/
 386          void DS1302_W_Time()
 387          {
 388   1         uchar i;
 389   1         uchar temp1;
 390   1         uchar temp2;
 391   1      
 392   1         for (i = 0; i < 7; i++)       // 十进制转BCD码
 393   1         {
 394   2            temp1 = (TimeBuff[i] / 10) << 4;
 395   2            temp2 = TimeBuff[i] % 10;
 396   2            TimeBuff[i] = temp1 + temp2;
 397   2         }
 398   1         DS1302_W_Byte(0x8E, 0x00);                // 关闭写保护 
 399   1         DS1302_W_Byte(0x80, 0x80);                // 暂停时钟 
 400   1         DS1302_W_Byte(0x8C, TimeBuff[0]);            // 年 
 401   1         DS1302_W_Byte(0x88, TimeBuff[1]);            // 月 
 402   1         DS1302_W_Byte(0x86, TimeBuff[2]);            // 日 
 403   1         DS1302_W_Byte(0x8A, TimeBuff[3]);            // 星期
 404   1         DS1302_W_Byte(0x84, TimeBuff[4]);            // 时 
 405   1         DS1302_W_Byte(0x82, TimeBuff[5]);            // 分
 406   1         DS1302_W_Byte(0x80, TimeBuff[6]);            // 秒
 407   1         DS1302_W_Byte(0x80, TimeBuff[6] & 0x7F);     // 运行时钟
 408   1         DS1302_W_Byte(0x8E, 0x80);                // 打开写保护  
 409   1      }
 410          
 411          /*******************************读出时间数据*/
 412          void DS1302_R_Time()
 413          {
 414   1         uchar i;
 415   1         TimeBuff[0] = DS1302_R_Byte(0x8D);           // 年 
 416   1         TimeBuff[1] = DS1302_R_Byte(0x89);           // 月 
 417   1         TimeBuff[2] = DS1302_R_Byte(0x87);           // 日 
 418   1         TimeBuff[3] = DS1302_R_Byte(0x8B);           // 星期
 419   1         TimeBuff[4] = DS1302_R_Byte(0x85);           // 时 
 420   1         TimeBuff[5] = DS1302_R_Byte(0x83);           // 分 
 421   1         TimeBuff[6] = (DS1302_R_Byte(0x81)) & 0x7F;     // 秒 
 422   1      
 423   1         for (i = 0; i < 7; i++)    // BCD转十进制
 424   1         {
 425   2            TimeBuff[i] = (TimeBuff[i] / 16) * 10 + TimeBuff[i] % 16;
 426   2         }
C51 COMPILER V9.60.0.0   MAIN                                                              10/31/2020 11:20:08 PAGE 8   

 427   1      }
 428          
 429          /*******************判断时钟芯片是否正常运行*/
 430          void DS1302_Check()
 431          {
 432   1         if (DS1302_R_Byte(0x81) >= 128)  // 判断时钟芯片是否正常运行
 433   1            DS1302_W_Time();           // 如果没有，则初始化一个时间
 434   1      }
 435          /***********************************初始化*/
 436          void DS1302_Init()
 437          {
 438   1         DS1302_RST = 0;
 439   1         DS1302_CLK = 0;
 440   1         DS1302_IO = 0;
 441   1      }
 442          
 443          
 444          void main()
 445          {
 446   1         STC89_TX_1C_Board_IO_Base_Init();
 447   1      
 448   1         DS1302_Init();
 449   1         DS1302_W_Time();
 450   1         DS1302_Check();
 451   1      
 452   1         while (1)
 453   1         {
 454   2            DS1302_R_Time();
 455   2      
 456   2            hour_shi = TimeBuff[4] / 10;
 457   2            hour_ge = TimeBuff[4] % 10;
 458   2            min_shi = TimeBuff[5] / 10;
 459   2            min_ge = TimeBuff[5] % 10;
 460   2            sec_shi = TimeBuff[6] / 10;
 461   2            sec_ge = TimeBuff[6] % 10;
 462   2      
 463   2            DigitalTube_Display_6bit(hour_shi, hour_ge, min_shi, min_ge, sec_shi, sec_ge);
 464   2         }
 465   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    721    ----
   CONSTANT SIZE    =     55    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
